# This is a document explaining SQL injection and some ways to go about it. 
# Author: Tanner Michael


What is a SQL injection?
    -> It is an injection attack that makes it possible to execute malicious SQL statements. These statements control a database server behind a web application. Attackers can use SQL Injection vulnerabilities to bypass application security measures. They can go around authentication and authorization of a web page or web application and retrieve the content of the entire SQL database. They can also use SQL Injection to add, modify, and delete records in the database.

How is one performed?
    -> First the attacker must find vulnerable user inputs within the web page or app. A web page or web application that has an SQL Injection vulnerability uses such user input directly in an SQL query. The attacker can create input content. Such content is often called a malicious payload and is the key part of the attack. After the attacker sends this content, malicious SQL commands are executed in the database.

Below are some examples of SQL injection attacks:

    The following script is pseudocode executed on a web server. It is a simple example of authenticating with a username and a password. The example database has a table named users with the following columns: username and password.

    ---------------------------------------------
    # Define POST variables
    uname = request.POST['username']
    passwd = request.POST['password']

    # SQL query vulnerable to SQLi
    sql = “SELECT id FROM users WHERE username=’” + uname + “’ AND password=’” + passwd + “’”

    # Execute the SQL statement
    database.execute(sql)
    -----------------------------------------------

    An attacker could use SQL commands in the input in a way that would alter the SQL executed by the database server. For example, they could use a trick involving a single quote and set the "passwd" field to:
        -> password' OR 1=1

    As a result, the database server runs the following SQL query:
        -> SELECT id FROM users WHERE username='username' AND password='password' OR 1=1'

    Because of the 1=1 statement, the WHERE clause returns the first id from the users table no matter what the username and password are. The first user id in a database is very often the administrator. In this way, the attacker not only bypasses authentication but also gains administrator privileges. They can also comment out the rest of the SQL statement to control the execution of the SQL query further:

        -- MySQL, MSSQL, Oracle, PostgreSQL, SQLite
        ' OR '1'='1' --
        ' OR '1'='1' /*
        -- MySQL
        ' OR '1'='1' #
        -- Access (using null characters)
        ' OR '1'='1' %00
        ' OR '1'='1' %16


Now, how do we prevent an SQL injection?
    -> The only sure way to prevent SQL Injection attacks is input validation and parametrized queries including prepared statements. The application code should never use the input directly. The developer must sanitize all input, not only web form inputs such as login forms. They must remove potential malicious code elements such as single quotes. It is also a good idea to turn off the visibility of database errors on your production sites. Database errors can be used with SQL Injection to gain information about your database.

    If you discover an SQL Injection vulnerability, for example using an Acunetix scan, you may be unable to fix it immediately. For example, the vulnerability may be in open source code. In such cases, you can use a web application firewall to sanitize your input temporarily.